[gd_scene load_steps=40 format=2]

[ext_resource path="res://assets/ui/scene/scene.png" type="Texture" id=1]
[ext_resource path="res://assets/ui/portrait/main_character.png" type="Texture" id=2]
[ext_resource path="res://Combat.gd" type="Script" id=3]
[ext_resource path="res://ui/StackItem.tscn" type="PackedScene" id=4]
[ext_resource path="res://ui/BgBlock.tscn" type="PackedScene" id=5]
[ext_resource path="res://ui/HpBar.tscn" type="PackedScene" id=6]
[ext_resource path="res://assets/fonts/blowbrush.ttf" type="DynamicFontData" id=7]
[ext_resource path="res://assets/fonts/douyuFont-2.otf" type="DynamicFontData" id=8]
[ext_resource path="res://assets/ui/portrait/normal_ghost.png" type="Texture" id=9]
[ext_resource path="res://assets/ui/sprites/ghost/idle.png" type="Texture" id=10]
[ext_resource path="res://assets/musics/bgm01.wav" type="AudioStream" id=11]
[ext_resource path="res://assets/ui/sprites/player/dead.png" type="Texture" id=12]
[ext_resource path="res://assets/ui/sprites/ghost/dead.png" type="Texture" id=13]
[ext_resource path="res://assets/ui/sprites/player/idle.png" type="Texture" id=14]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform vec4 base_color: hint_color = vec4(1.0, 0.2, 0.1, 1.0);
uniform vec2 resolution = vec2(492.0, 40.0);
uniform bool flip = false;

uniform float val: hint_range(0.0, 1.0) = 1.0;

float sat(float t) {
    return clamp(t, 0.0, 1.0);
}

float remap01(float a, float b, float t) {
    return sat((t - a) / (b - a));
}

float remap(float a, float b, float c, float d, float t) {
    return remap01(a, b, t) * (d - c) + c;
}


float rect(vec2 uv, vec2 size) {
    float blur = 0.000;
    // 让 size 成正比
    size = 0.5 - size * 0.5;
    // 先画一边
    vec2 r = vec2(step(size.x, uv.x), step(size.y, uv.y));
    // 再画相反的边，相乘得出相交位置就是对应的矩形
    r *= vec2(step(size.x, 1.0 - uv.x), step(size.y, 1.0 - uv.y));
    // x 和 y 相乘得出矩形的像素点值
    return r.x * r.y;
}

float circle(vec2 uv, float r, vec2 arg_resoulation) {
    uv -= 0.5;
//	resolution = vec2(492, 40);	
//    uv.x *= iResolution.x / iResolution.y;
	uv.x *= arg_resoulation.x / arg_resoulation.y;
    float blur = 0.005;
    
    // 用 uv 做长度,点距离零点的距离会呈圆形递增
    float d = length(uv);
    d = step(d, r);
    return d;
}

float round_rect(vec2 uv, vec2 arg_resoulation) {    
    float radius = 0.5;
    float c1 = circle(vec2(uv.x+0.45, uv.y), radius, arg_resoulation);
    float c2 = circle(vec2(uv.x-0.45, uv.y), radius, arg_resoulation);
    
//    float r = rect(vec2(uv.x, uv.y), vec2(size.x-radius, size.y));
    float r = rect(vec2(uv.x, uv.y), vec2(0.9, 1.0));
	
	float res = c1+c2+r;
//	float res = r;

    return min(res, 1.0);
}

void fragment()
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = UV;
	if (flip) {
		uv.x = 1.0 - uv.x;
	}
	
	vec4 col = base_color;
    
    vec2 size = vec2(1.0, 1.0);
    
    
    float t = round_rect(uv, resolution);
    col.a = t;
	
	// outline
	float offset = 0.005;
	uv.y *= 1.05;
	uv.x += offset;
	float t2 = round_rect(uv*(1.0 + offset) - offset / 2.0, resolution);
	col.rgb = mix(col.rgb, col.rgb * 0.2, 1.0 - t2);
	
	// lost
	float l = smoothstep(val, val + 0.0005, uv.x);
    col.rgb = mix(col.rgb, col.rgb * 0.2, l);
	
	// highlight
    float hy = uv.y;
    hy += sin(TIME*6.+uv.x*12.0) * sin(TIME*3.0) * 0.2;
    float highlight = smoothstep(0.6, 0.6, hy);
    highlight *= 3.0;
    if (hy <= 0.3 && uv.x >= l) {
        col.rgb *= 1.5;
    }

    // Output to screen
    COLOR = col;
}"

[sub_resource type="ShaderMaterial" id=95]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/base_color = Color( 0.763672, 0.207974, 0.207974, 1 )
shader_param/resolution = Vector2( 490, 48 )
shader_param/flip = false
shader_param/val = 1.0

[sub_resource type="DynamicFont" id=94]
size = 64
outline_size = 2
outline_color = Color( 0.270588, 0.137255, 0.0509804, 1 )
font_data = ExtResource( 7 )

[sub_resource type="ShaderMaterial" id=96]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/base_color = Color( 0.763672, 0.207974, 0.207974, 1 )
shader_param/resolution = Vector2( 490, 48 )
shader_param/flip = true
shader_param/val = 1.0

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

uniform vec4 base_col: hint_color = vec4(0.27, 0.14, 0.05, 1.0);
uniform vec2 resolution = vec2(256.0, 64.0);
uniform float radius = 0.1;

float sat(float t) {
    return clamp(t, 0.0, 1.0);
}

float remap01(float a, float b, float t) {
    return sat((t - a) / (b - a));
}

float remap(float a, float b, float c, float d, float t) {
    return remap01(a, b, t) * (d - c) + c;
}

float rect(vec2 uv, vec2 size) {
    float blur = 0.000;
    // 让 size 成正比
    size = 0.5 - size * 0.5;
    // 先画一边
    vec2 r = vec2(step(size.x, uv.x), step(size.y, uv.y));
    // 再画相反的边，相乘得出相交位置就是对应的矩形
    r *= vec2(step(size.x, 1.0 - uv.x), step(size.y, 1.0 - uv.y));
    // x 和 y 相乘得出矩形的像素点值
    return r.x * r.y;
}

float circle(vec2 uv, float r) {
    uv -= 0.5;
    uv.x *= resolution.x / resolution.y;
    float blur = 0.005;
    
    // 用 uv 做长度,点距离零点的距离会呈圆形递增
    float d = length(uv);
    d = step(d, r);
    return d;
}


float round_rect(vec2 uv, float r) {
	float c1 = circle(uv+0.5-r, r);
	float c2 = circle(uv-0.5+r, r);
	float c3 = circle(vec2(uv.x+0.5-r, uv.y-0.5+r), r);
	float c4 = circle(vec2(uv.x-0.5+r, uv.y+0.5-r), r);

	float rect1 = rect(uv, vec2(1.0 - r * 1.5, 1.0 - r * 2.0));
	float rect2 = rect(uv, vec2(1.0- r *2.0, 1.0));

	float s = min(c1+c2+c3+c4+rect1+rect2, 1.0);
	return s;
}

void fragment() {
	vec4 col = vec4(0.27, 0.14, 0.01, 1.0);
	vec2 uv = UV;

	float s = round_rect(uv, radius);
	col.a = s;
	
	
	float offset = 0.1;
	s = round_rect(uv*(1.0 + offset) - offset / 2.0, radius);
	col.rgb = mix(col.rgb, vec3(0.86, 0.59, 0.52), s);
	
	offset = 0.2;
	s = round_rect(uv*(1.0 + offset) - offset / 2.0, radius);
	col.rgb = mix(col.rgb, vec3(0.65, 0.38, 0.26), s);
//	uv *= 1.5;
//	uv -= 0.5;
//	s = round_rect(uv, radius);
//	col.rgb = mix(col.rgb, col.rgb*1.5, 1.0 - s); 
	
	COLOR = col;
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/base_col = Color( 0.647059, 0.384314, 0.262745, 1 )
shader_param/resolution = Vector2( 256, 64 )
shader_param/radius = 0.1

[sub_resource type="DynamicFont" id=29]
size = 24
outline_size = 2
outline_color = Color( 0.270588, 0.137255, 0.0509804, 1 )
font_data = ExtResource( 8 )

[sub_resource type="Shader" id=30]
code = "shader_type canvas_item;

uniform vec4 base_col: hint_color = vec4(0.27, 0.14, 0.05, 1.0);
uniform vec2 resolution = vec2(256.0, 64.0);
uniform float radius = 0.1;

float sat(float t) {
    return clamp(t, 0.0, 1.0);
}

float remap01(float a, float b, float t) {
    return sat((t - a) / (b - a));
}

float remap(float a, float b, float c, float d, float t) {
    return remap01(a, b, t) * (d - c) + c;
}

float rect(vec2 uv, vec2 size) {
    float blur = 0.000;
    // 让 size 成正比
    size = 0.5 - size * 0.5;
    // 先画一边
    vec2 r = vec2(step(size.x, uv.x), step(size.y, uv.y));
    // 再画相反的边，相乘得出相交位置就是对应的矩形
    r *= vec2(step(size.x, 1.0 - uv.x), step(size.y, 1.0 - uv.y));
    // x 和 y 相乘得出矩形的像素点值
    return r.x * r.y;
}

float circle(vec2 uv, float r) {
    uv -= 0.5;
    uv.x *= resolution.x / resolution.y;
    float blur = 0.005;
    
    // 用 uv 做长度,点距离零点的距离会呈圆形递增
    float d = length(uv);
    d = step(d, r);
    return d;
}


float round_rect(vec2 uv, float r) {
	float c1 = circle(uv+0.5-r, r);

	float rect1 = rect(uv, vec2(1.0 - r * 1.5, 1.0));
	float rect2 = rect(uv, vec2(1.0- r *2.0, 1.0));
	rect1 = rect(vec2(uv.x - r, uv.y), vec2(1.0));
	rect2 = rect(vec2(uv.x+0.2, uv.y - r * 1.0), vec2(1.0));

	float s = min(c1+rect1+rect2, 1.0);
	return s;
}

void fragment() {
	vec4 col = base_col;
	vec2 uv = UV;

	float s = round_rect(uv, radius);
	col.a = s;
	
	COLOR = col;
}"

[sub_resource type="ShaderMaterial" id=31]
shader = SubResource( 30 )
shader_param/base_col = Color( 0.447059, 0.458824, 0.686275, 1 )
shader_param/resolution = Vector2( 160, 160 )
shader_param/radius = 0.04

[sub_resource type="Shader" id=32]
code = "shader_type canvas_item;

uniform vec4 base_col: hint_color = vec4(0.27, 0.14, 0.05, 1.0);
uniform vec2 resolution = vec2(256.0, 64.0);
uniform float radius = 0.2;

float sat(float t) {
    return clamp(t, 0.0, 1.0);
}

float remap01(float a, float b, float t) {
    return sat((t - a) / (b - a));
}

float remap(float a, float b, float c, float d, float t) {
    return remap01(a, b, t) * (d - c) + c;
}

float rect(vec2 uv, vec2 size) {
    float blur = 0.000;
    // 让 size 成正比
    size = 0.5 - size * 0.5;
    // 先画一边
    vec2 r = vec2(step(size.x, uv.x), step(size.y, uv.y));
    // 再画相反的边，相乘得出相交位置就是对应的矩形
    r *= vec2(step(size.x, 1.0 - uv.x), step(size.y, 1.0 - uv.y));
    // x 和 y 相乘得出矩形的像素点值
    return r.x * r.y;
}

float circle(vec2 uv, float r) {
    uv -= 0.5;
    uv.x *= resolution.x / resolution.y;
    float blur = 0.005;
    
    // 用 uv 做长度,点距离零点的距离会呈圆形递增
    float d = length(uv);
    d = step(d, r);
    return d;
}


float round_rect(vec2 uv, float r) {
	float c1 = circle(uv+0.5-r, r);
	float c2 = circle(uv-0.5+r, r);
	float c3 = circle(vec2(uv.x+0.5-r, uv.y-0.5+r), r);
	float c4 = circle(vec2(uv.x-0.5+r, uv.y+0.5-r), r);

	float rect1 = rect(uv, vec2(1.0 - r * 1.5, 1.0 - r * 2.0));
	float rect2 = rect(uv, vec2(1.0- r *2.0, 1.0));

	float s = min(c1+c2+c3+c4+rect1+rect2, 1.0);
	return s;
}

void fragment() {
	vec4 col = vec4(0.27, 0.14, 0.01, 1.0);
	vec2 uv = UV;

	float s = round_rect(uv, radius);
	col.a = s;
	
	
	float offset = 0.12;
	s = round_rect(uv*(1.0 + offset) - offset / 2.0, radius);
	col.rgb = mix(col.rgb, vec3(0.86, 0.59, 0.52), s);
	
	offset = 0.2;
	uv.y = uv.y * 0.7 + 0.15;
	s = rect(uv*(1.0 + offset) - offset / 2.0, vec2(0.7));
	col.rgb = mix(col.rgb, vec3(0.27, 0.14, 0.01), s);
//	uv *= 1.5;
//	uv -= 0.5;
//	s = round_rect(uv, radius);
//	col.rgb = mix(col.rgb, col.rgb*1.5, 1.0 - s); 
	
	COLOR = col;
}"

[sub_resource type="ShaderMaterial" id=97]
resource_local_to_scene = true
shader = SubResource( 32 )
shader_param/base_col = Color( 0.419608, 0.188235, 0.109804, 1 )
shader_param/resolution = Vector2( 130, 32 )
shader_param/radius = 0.2

[sub_resource type="AtlasTexture" id=112]
atlas = ExtResource( 14 )
region = Rect2( 0, 0, 120, 120 )

[sub_resource type="AtlasTexture" id=113]
atlas = ExtResource( 14 )
region = Rect2( 120, 0, 120, 120 )

[sub_resource type="AtlasTexture" id=110]
atlas = ExtResource( 12 )
region = Rect2( 0, 0, 120, 120 )

[sub_resource type="AtlasTexture" id=111]
atlas = ExtResource( 12 )
region = Rect2( 120, 0, 120, 120 )

[sub_resource type="SpriteFrames" id=86]
animations = [ {
"frames": [ SubResource( 112 ), SubResource( 113 ) ],
"loop": true,
"name": "idle",
"speed": 2.0
}, {
"frames": [ SubResource( 110 ), SubResource( 111 ) ],
"loop": false,
"name": "dead",
"speed": 4.0
} ]

[sub_resource type="AtlasTexture" id=98]
atlas = ExtResource( 10 )
region = Rect2( 0, 0, 64, 64 )

[sub_resource type="AtlasTexture" id=99]
atlas = ExtResource( 10 )
region = Rect2( 64, 0, 64, 64 )

[sub_resource type="AtlasTexture" id=100]
atlas = ExtResource( 13 )
region = Rect2( 0, 0, 64, 64 )

[sub_resource type="AtlasTexture" id=101]
atlas = ExtResource( 13 )
region = Rect2( 64, 0, 64, 64 )

[sub_resource type="AtlasTexture" id=102]
atlas = ExtResource( 13 )
region = Rect2( 128, 0, 64, 64 )

[sub_resource type="AtlasTexture" id=103]
atlas = ExtResource( 13 )
region = Rect2( 192, 0, 64, 64 )

[sub_resource type="AtlasTexture" id=104]
atlas = ExtResource( 13 )
region = Rect2( 256, 0, 64, 64 )

[sub_resource type="SpriteFrames" id=85]
animations = [ {
"frames": [ SubResource( 98 ), SubResource( 99 ) ],
"loop": true,
"name": "idle",
"speed": 2.0
}, {
"frames": [ SubResource( 100 ), SubResource( 101 ), SubResource( 102 ), SubResource( 103 ), SubResource( 104 ) ],
"loop": false,
"name": "dead",
"speed": 10.0
} ]

[sub_resource type="DynamicFont" id=109]
size = 120
outline_size = 4
outline_color = Color( 0, 0, 0, 1 )
font_data = ExtResource( 7 )

[node name="Combat" type="Node2D"]
script = ExtResource( 3 )

[node name="UI" type="Control" parent="."]
margin_right = 40.0
margin_bottom = 40.0
rect_min_size = Vector2( 1280, 720 )

[node name="Bg" type="ColorRect" parent="UI"]
anchor_right = 1.0
anchor_bottom = 1.0
color = Color( 0.682353, 0.705882, 0.901961, 1 )
__meta__ = {
"_edit_lock_": true
}

[node name="BgBlocks" type="Control" parent="UI/Bg"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -1.0
margin_top = -2.0
margin_right = -1.0
margin_bottom = -2.0
__meta__ = {
"_edit_lock_": true
}

[node name="Block2" parent="UI/Bg/BgBlocks" instance=ExtResource( 5 )]
margin_left = 221.0
margin_top = 177.0
margin_right = 674.0
margin_bottom = 195.0
velocity = 896

[node name="Block3" parent="UI/Bg/BgBlocks" instance=ExtResource( 5 )]
margin_left = 688.0
margin_top = 501.0
margin_right = 860.0
margin_bottom = 519.0
velocity = 1234

[node name="Block4" parent="UI/Bg/BgBlocks" instance=ExtResource( 5 )]
margin_left = 98.0
margin_top = 643.0
margin_right = 346.0
margin_bottom = 661.0

[node name="Block5" parent="UI/Bg/BgBlocks" instance=ExtResource( 5 )]
margin_left = 1170.0
margin_top = 364.0
margin_right = 1385.0
margin_bottom = 382.0
velocity = 966

[node name="Scene" type="TextureRect" parent="UI"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -440.0
margin_top = -208.0
margin_right = 520.0
margin_bottom = 332.0
rect_min_size = Vector2( 960, 540 )
texture = ExtResource( 1 )
expand = true
__meta__ = {
"_edit_lock_": true
}

[node name="Top" type="Control" parent="UI"]
anchor_right = 1.0
rect_min_size = Vector2( 0, 128 )

[node name="MarginContainer" type="MarginContainer" parent="UI/Top"]
anchor_right = 1.0
anchor_bottom = 1.0
rect_min_size = Vector2( 0, 128 )
size_flags_horizontal = 3
size_flags_vertical = 3
custom_constants/margin_right = 32
custom_constants/margin_left = 32

[node name="HBoxContainer" type="HBoxContainer" parent="UI/Top/MarginContainer"]
margin_left = 32.0
margin_top = 34.0
margin_right = 1248.0
margin_bottom = 94.0
rect_min_size = Vector2( 0, 60 )
size_flags_horizontal = 0
size_flags_vertical = 6

[node name="Player" type="HBoxContainer" parent="UI/Top/MarginContainer/HBoxContainer"]
margin_right = 562.0
margin_bottom = 60.0
custom_constants/separation = 12

[node name="Portrait" type="TextureRect" parent="UI/Top/MarginContainer/HBoxContainer/Player"]
margin_right = 60.0
margin_bottom = 60.0
rect_min_size = Vector2( 60, 60 )
size_flags_horizontal = 0
size_flags_vertical = 6
texture = ExtResource( 2 )
expand = true

[node name="HpBar" parent="UI/Top/MarginContainer/HBoxContainer/Player" instance=ExtResource( 6 )]
material = SubResource( 95 )
margin_left = 72.0
margin_top = 6.0
margin_right = 562.0
margin_bottom = 54.0

[node name="RichTextLabel" type="RichTextLabel" parent="UI/Top/MarginContainer/HBoxContainer"]
margin_left = 566.0
margin_right = 650.0
margin_bottom = 60.0
rect_min_size = Vector2( 84, 60 )
size_flags_vertical = 6
custom_colors/default_color = Color( 0.937255, 0.717647, 0.458824, 1 )
custom_fonts/normal_font = SubResource( 94 )
bbcode_enabled = true
bbcode_text = "[center]VS[/center]"
text = "VS"
scroll_active = false

[node name="Enemy" type="HBoxContainer" parent="UI/Top/MarginContainer/HBoxContainer"]
margin_left = 654.0
margin_right = 1216.0
margin_bottom = 60.0
custom_constants/separation = 12

[node name="HpBar" parent="UI/Top/MarginContainer/HBoxContainer/Enemy" instance=ExtResource( 6 )]
material = SubResource( 96 )
margin_top = 6.0
margin_bottom = 54.0

[node name="Portrait" type="TextureRect" parent="UI/Top/MarginContainer/HBoxContainer/Enemy"]
margin_left = 502.0
margin_right = 562.0
margin_bottom = 60.0
rect_min_size = Vector2( 60, 60 )
size_flags_horizontal = 0
size_flags_vertical = 6
texture = ExtResource( 9 )
expand = true

[node name="TermKeyPanel" type="Panel" parent="UI"]
material = SubResource( 4 )
anchor_left = 1.0
anchor_top = 0.2
anchor_right = 1.0
anchor_bottom = 0.2
margin_left = -213.0
margin_top = -10.0
margin_right = 43.0
margin_bottom = 54.0
rect_min_size = Vector2( 256, 64 )
rect_scale = Vector2( 1, 1.00859 )
size_flags_horizontal = 0
size_flags_vertical = 0
__meta__ = {
"_edit_group_": true
}

[node name="Label" type="Label" parent="UI/TermKeyPanel"]
anchor_right = 1.0
anchor_bottom = 1.0
size_flags_horizontal = 3
size_flags_vertical = 6
custom_colors/font_color = Color( 0.937255, 0.717647, 0.458824, 1 )
custom_fonts/font = SubResource( 29 )
text = "Reason"
align = 1
valign = 1

[node name="PlayerActionPanel" type="VBoxContainer" parent="UI"]
anchor_top = 0.56
anchor_bottom = 0.56
margin_top = -260.0
margin_right = 280.0
margin_bottom = 284.0
rect_min_size = Vector2( 280, 520 )
custom_constants/separation = 32
alignment = 1
__meta__ = {
"_edit_lock_": true
}

[node name="EmenyPanel" type="VBoxContainer" parent="UI"]
anchor_left = 1.0
anchor_top = 0.6
anchor_right = 1.0
anchor_bottom = 0.6
margin_left = -140.0
margin_top = -126.0
margin_bottom = 126.0
rect_pivot_offset = Vector2( 162, 95 )
custom_constants/separation = 12
alignment = 1

[node name="ActionStack" type="Panel" parent="UI"]
visible = false
material = SubResource( 31 )
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -140.0
margin_top = -189.0
rect_min_size = Vector2( 140, 160 )

[node name="MarginContainer" type="MarginContainer" parent="UI/ActionStack"]
anchor_right = 1.0
anchor_bottom = 1.0
custom_constants/margin_right = 10
custom_constants/margin_top = 10
custom_constants/margin_left = 10
custom_constants/margin_bottom = 15

[node name="VBoxContainer" type="VBoxContainer" parent="UI/ActionStack/MarginContainer"]
margin_left = 10.0
margin_top = 10.0
margin_right = 130.0
margin_bottom = 174.0
custom_constants/separation = 10
alignment = 2

[node name="StackItem" parent="UI/ActionStack/MarginContainer/VBoxContainer" instance=ExtResource( 4 )]
material = SubResource( 97 )
margin_top = 132.0
margin_bottom = 164.0

[node name="Player" type="AnimatedSprite" parent="."]
position = Vector2( 537, 464 )
scale = Vector2( 4, 4 )
frames = SubResource( 86 )
animation = "idle"
playing = true

[node name="Ghost" type="AnimatedSprite" parent="."]
position = Vector2( 742, 357 )
scale = Vector2( 4, 4 )
frames = SubResource( 85 )
animation = "idle"
playing = true

[node name="ResultText" type="RichTextLabel" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = 411.0
margin_top = 306.0
margin_right = 903.0
margin_bottom = 427.0
custom_colors/default_color = Color( 1, 0.831373, 0.180392, 1 )
custom_fonts/normal_font = SubResource( 109 )
bbcode_enabled = true
bbcode_text = "[center]YOU LOST![/center]"
text = "YOU LOST!"
fit_content_height = true
scroll_active = false

[node name="BgmPlayer" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 11 )
autoplay = true

[node name="SoundEffectPlayer" type="AudioStreamPlayer" parent="."]
volume_db = 3.0
